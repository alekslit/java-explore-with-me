{
	"info": {
		"_postman_id": "cd5583b6-eaaf-4faa-bdd7-d7b0f8a6a4a5",
		"name": "EWM feature-comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30802125"
	},
	"item": [
		{
			"name": "User comments",
			"item": [
				{
					"name": "Сохраняем комментарий (comment.text is blank)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (text.lenght == 2) (save commentId = 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"    pm.expect('user1_test').equal(target.authorName, 'Имя автора должно соответствовать имени пользователя оставившего комментарий');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Да\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (text.lenght == 1000) (save commentId = 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"    pm.expect('user2_test').equal(target.authorName, 'Имя автора должно соответствовать имени пользователя оставившего комментарий');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/events/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (text.lenght > 1000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/events/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (userId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/9999/events/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9999",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (eventId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/9999/events/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9999",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (event.status != PUBLISHED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Да\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/2/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"2",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (save commentId = 4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"    pm.expect('user3_test').equal(target.authorName, 'Имя автора должно соответствовать имени пользователя оставившего комментарий');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/3/events/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (comment.text is blank)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/events/1/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events",
								"1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (text.lenght == 2) (update commentId = 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"no\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/events/1/comments/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events",
								"1",
								"comments",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (text.lenght == 1000) (update commentId = 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (text.lenght > 1000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/3/events/1/comments/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3",
								"events",
								"1",
								"comments",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (userId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/9999/events/1/comments/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9999",
								"events",
								"1",
								"comments",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (eventId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/3/events/9999/comments/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3",
								"events",
								"9999",
								"comments",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (commentId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/3/events/1/comments/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3",
								"events",
								"1",
								"comments",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (прошло > 24 часов)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (User не автор)",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1/comments/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменяем комментарий (update commentId = 4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаляем комментарий (userId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/9999/events/1/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9999",
								"events",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаляем комментарий (eventId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/events/9999/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"9999",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаляем комментарий (commentId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1/comments/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаляем комментарий (User не автор)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2/events/1/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаляем комментарий (delete commentId = 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin comments",
			"item": [
				{
					"name": "Удаляем комментарий (eventId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/9999/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"9999",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаляем комментарий (commentId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/1/comments/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"1",
								"comments",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаляем комментарий (delete commentId = 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/1/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список комментариев (from = -1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments?from=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments"
							],
							"query": [
								{
									"key": "users",
									"value": null,
									"disabled": true
								},
								{
									"key": "events",
									"value": null,
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": null,
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": null,
									"disabled": true
								},
								{
									"key": "from",
									"value": "-1"
								},
								{
									"key": "size",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список комментариев (size = 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments?size=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments"
							],
							"query": [
								{
									"key": "users",
									"value": null,
									"disabled": true
								},
								{
									"key": "events",
									"value": null,
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": null,
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": null,
									"disabled": true
								},
								{
									"key": "from",
									"value": "",
									"disabled": true
								},
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список комментариев (без фильтров)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email, eventId, creationDate\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('text');\r",
									"    pm.expect(target[0]).to.have.property('authorName');\r",
									"    pm.expect(target[0]).to.have.property('eventId');\r",
									"    pm.expect(target[0]).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено 2 комментария.\", function () {\r",
									"    pm.expect(target.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments"
							],
							"query": [
								{
									"key": "users",
									"value": "",
									"disabled": true
								},
								{
									"key": "events",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "",
									"disabled": true
								},
								{
									"key": "size",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список комментариев (часть фильтров)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email, eventId, creationDate\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('text');\r",
									"    pm.expect(target[0]).to.have.property('authorName');\r",
									"    pm.expect(target[0]).to.have.property('eventId');\r",
									"    pm.expect(target[0]).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Должен быть найден 1 комментарий.\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments?users=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments"
							],
							"query": [
								{
									"key": "users",
									"value": "2"
								},
								{
									"key": "events",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "",
									"disabled": true
								},
								{
									"key": "size",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список комментариев (все фильтры)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должны получить пустой список.\", function () {\r",
									"    pm.expect(target.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments?users=3&events=2&rangeStart=2024-01-01 00:00:00&rangeEnd=2024-03-05 00:00:00&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments"
							],
							"query": [
								{
									"key": "users",
									"value": "3"
								},
								{
									"key": "events",
									"value": "2"
								},
								{
									"key": "rangeStart",
									"value": "2024-01-01 00:00:00"
								},
								{
									"key": "rangeEnd",
									"value": "2024-03-05 00:00:00"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User complaints",
			"item": [
				{
					"name": "Сохраняем комментарий (save commentId = 5)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"    pm.expect('user2_test').equal(target.authorName, 'Имя автора должно соответствовать имени пользователя оставившего комментарий');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/events/3/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events",
								"3",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (save commentId = 6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"    pm.expect('user4_test').equal(target.authorName, 'Имя автора должно соответствовать имени пользователя оставившего комментарий');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment6\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/4/events/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"4",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (complaint.reason is blank)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/comments/6/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"comments",
								"6",
								"complaint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (reason.length == 4) (save complaintId = 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, reason, userId, commentId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('commentId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.reason).equal(target.reason, 'Причина жалобы должна соответствовать причине из запроса');\r",
									"    pm.expect(1).equal(target.userId, 'Id автора должно соответствовать id пользователя из запроса');\r",
									"    pm.expect(6).equal(target.commentId, 'Id комментария должно соответствовать id коментария из запроса');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"SPAM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/comments/6/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"comments",
								"6",
								"complaint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (reason.length == 7) (save complaintId = 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, reason, userId, commentId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('commentId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.reason).equal(target.reason, 'Причина жалобы должна соответствовать причине из запроса');\r",
									"    pm.expect(3).equal(target.userId, 'Id автора должно соответствовать id пользователя из запроса');\r",
									"    pm.expect(5).equal(target.commentId, 'Id комментария должно соответствовать id коментария из запроса');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"OBSCENE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/3/events/comments/5/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3",
								"events",
								"comments",
								"5",
								"complaint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (reason.length > 7)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/comments/4/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"comments",
								"4",
								"complaint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (complaint.reason == XXXXXX)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"XXXXXX\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/comments/4/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"comments",
								"4",
								"complaint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (userId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"SPAM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/9999/events/comments/4/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9999",
								"events",
								"comments",
								"4",
								"complaint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (commentId == 9999)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"SPAM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/comments/9999/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"comments",
								"9999",
								"complaint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (user.id == comment.author.id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"SPAM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/events/comments/3/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events",
								"comments",
								"3",
								"complaint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (save complaintId = 3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, reason, userId, commentId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('commentId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.reason).equal(target.reason, 'Причина жалобы должна соответствовать причине из запроса');\r",
									"    pm.expect(1).equal(target.userId, 'Id автора должно соответствовать id пользователя из запроса');\r",
									"    pm.expect(4).equal(target.commentId, 'Id комментария должно соответствовать id коментария из запроса');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"SPAM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/comments/4/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"comments",
								"4",
								"complaint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем жалобу (дубликат жалобы)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reason\": \"SPAM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/comments/4/complaint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"comments",
								"4",
								"complaint"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin complaints",
			"item": [
				{
					"name": "Получаем список жалоб (from = -1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/complaints?from=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								"complaints"
							],
							"query": [
								{
									"key": "users",
									"value": "",
									"disabled": true
								},
								{
									"key": "comments",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список жалоб (size = 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/complaints?size=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								"complaints"
							],
							"query": [
								{
									"key": "users",
									"value": "",
									"disabled": true
								},
								{
									"key": "comments",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "",
									"disabled": true
								},
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список жалоб (без фильтров)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, reason, userId, commentId, creationDate\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('reason');\r",
									"    pm.expect(target[0]).to.have.property('userId');\r",
									"    pm.expect(target[0]).to.have.property('commentId');\r",
									"    pm.expect(target[0]).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено 3 жалобы.\", function () {\r",
									"    pm.expect(target.length).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/complaints",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								"complaints"
							],
							"query": [
								{
									"key": "users",
									"value": "",
									"disabled": true
								},
								{
									"key": "comments",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "",
									"disabled": true
								},
								{
									"key": "size",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список жалоб (часть фильтров)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, reason, userId, commentId, creationDate\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('reason');\r",
									"    pm.expect(target[0]).to.have.property('userId');\r",
									"    pm.expect(target[0]).to.have.property('commentId');\r",
									"    pm.expect(target[0]).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено 2 жалобы.\", function () {\r",
									"    pm.expect(target.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/complaints?users=1,2&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								"complaints"
							],
							"query": [
								{
									"key": "users",
									"value": "1,2"
								},
								{
									"key": "comments",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "",
									"disabled": true
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получаем список жалоб (все фильтры)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, reason, userId, commentId, creationDate\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('reason');\r",
									"    pm.expect(target[0]).to.have.property('userId');\r",
									"    pm.expect(target[0]).to.have.property('commentId');\r",
									"    pm.expect(target[0]).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено 1 жалобу.\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/complaints?users=3&comments=5&rangeStart=2023-01-01 00:00:00&rangeEnd=2024-05-05 00:00:00&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								"complaints"
							],
							"query": [
								{
									"key": "users",
									"value": "3"
								},
								{
									"key": "comments",
									"value": "5"
								},
								{
									"key": "rangeStart",
									"value": "2023-01-01 00:00:00"
								},
								{
									"key": "rangeEnd",
									"value": "2024-05-05 00:00:00"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Event with comments",
			"item": [
				{
					"name": "Private event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать комментарии\", function () {\r",
									"    pm.expect(target).to.have.property('comments');\r",
									"});\r",
									"\r",
									"pm.test(\"Должно быть найдено 3 комментария к этому событию.\", function () {\r",
									"    pm.expect(target.comments.length).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Public event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать комментарии\", function () {\r",
									"    pm.expect(target).to.have.property('comments');\r",
									"});\r",
									"\r",
									"pm.test(\"Должен быть найден 1 комментарий к этому событию.\", function () {\r",
									"    pm.expect(target.comments.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (save commentId = 7)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"    pm.expect('user1_test').equal(target.authorName, 'Имя автора должно соответствовать имени пользователя оставившего комментарий');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment7\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events/4/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"4",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохраняем комментарий (save commentId = 8)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, eventId, creationDate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('creationDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
									"    pm.expect('user2_test').equal(target.authorName, 'Имя автора должно соответствовать имени пользователя оставившего комментарий');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"text_comment8\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/events/4/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"events",
								"4",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка сортировки по количеству комментариев",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должно быть найдено 3 события.\", function () {\r",
									"    pm.expect(target.length).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Должен соблюдаться порядок сортировки по количеству комментариев у события.\", function () {\r",
									"    pm.expect(target[0].id).to.eql(1);\r",
									"    pm.expect(target[0].commentsCount).to.eql(3);\r",
									"\r",
									"    pm.expect(target[1].id).to.eql(4);\r",
									"    pm.expect(target[1].commentsCount).to.eql(2);\r",
									"\r",
									"    pm.expect(target[2].id).to.eql(3);\r",
									"    pm.expect(target[2].commentsCount).to.eql(1);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events?categories=1&rangeStart=2023-01-01 00:00:00&sort=COMMENTS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "text",
									"value": "",
									"disabled": true
								},
								{
									"key": "categories",
									"value": "1"
								},
								{
									"key": "paid",
									"value": "",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "2023-01-01 00:00:00"
								},
								{
									"key": "rangeEnd",
									"value": "",
									"disabled": true
								},
								{
									"key": "onlyAvailable",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "COMMENTS"
								},
								{
									"key": "from",
									"value": "",
									"disabled": true
								},
								{
									"key": "size",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}